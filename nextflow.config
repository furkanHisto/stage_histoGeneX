/*
 * -------------------------------------------------
 *  hgx/rnaseq 1.0 config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Referenced from nf-core/rnaseq
 * Changes by HGX
 */

 params {

     transcriptome = "/mnt/storage/Reference/refdata-gex-GRCh38-2020-A"

     //reads = "mnt/storage/Data/10xGenomics_TrainingsRun/*.gz"

     fastq_dir = "/mnt/storage/Data/10xGenomics_TrainingsRun/"

     outdir = "/mnt/storage/Output/scRNAseq/OutputFurkan"

     kallisto_index = 	"/mnt/storage/Reference/GENCODE/v32/kallisto_index"

     input = "/mnt/storage/Data/10xGenomics_TrainingsRun/*_{R1,R2}_001.fastq.gz"

     bustools = "/home/histogenex/test_kallisto/test2/*/*.bus"
     
     whitelist = "/home/histogenex/cellranger-6.0.1/lib/python/cellranger/barcodes/737K-august-2016.txt"



 }


includeConfig 'conf/hgx.config'

// Global default params, used in configs
// params {

//   // Pipeline Options
//   // Workflow flags
//   genome = "GENCODE32"

//   reads = "/mnt/storage/Data/TEST_FASTQ/*_R{1,2}_001.fastq.gz"

//   outdir = "/mnt/storage/Output/RNAseq/v2_0_Hanne/"

//   singleEnd = false

//   genomes_base = "/mnt/storage/Reference"

//   sampleLevel = false


//   // References
//   splicesites = false
//   saveReference = false
//   gencode = true
//   compressedReference = false
//   gff = null


//   // Strandedness
//   forwardStranded = false
//   reverseStranded = true
//   unStranded = false
 

//   // Trimming
//   skipTrimming = false
//   clip_r1 = 0
//   clip_r2 = 0
//   three_prime_clip_r1 = 0
//   three_prime_clip_r2 = 0
//   trim_nextseq = 20
//   saveTrimmed = false


//   // Ribosomal RNA removal
//   removeRiboRNA = false
//   save_nonrRNA_reads = false
//   saveNonRiboRNAReads = false


//   // Alignment
//   aligner = 'star'
//   pseudo_aligner = 'kallisto'
//   seq_center = "HistoGeneX_EU"
//   saveAlignedIntermediates = true
//   skipAlignment = false
//   saveUnaligned = false
  

//   // Read Counting
//   fc_extra_attributes = 'gene_name'
//   fc_group_features = 'gene_id'
//   fc_count_type = 'exon'
//   fc_group_features_type = 'gene_biotype'
  
  

//   // QC
//   skipQC = false
//   skipFastQC = false
//   skipPreseq = false
//   skipDupRadar = false
//   skipQualimap = false
//   skipBiotypeQC = false
//   skipRseQC = false
//   skipEdgeR = false
//   skipMultiQC = false
//   skipRnaSeqMetrics = false
//   skipUploadToCenTRR = false


//   // Arriba
//   SkipArriba = false
//   ChimSegMin = 10
//   OverhangMin = 10
//   ScoreMin = 1
//   ScoreDropMax = 30
//   JunctionNonGTAG = 0
//   ScoreSeparation = 1
//   MismatchNmax = "5 -1 5 5"
//   ReadGapMax = 3

//   //quanTIseq
//   expr = true
//   arrays = false
//   signame = "TIL10"
//   tumor = true
//   mRNAscale = true
//   method = "lsei"
//   btotalcells = false
//   rmgenes = "default"


//   // Defaults
//   project = false
//   markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 (in Sarek) for details
//   rnaseqmetrics_java_options = '"-Xms4000m -Xmx7g"'
//   hisat_build_memory = 200 // Required amount of memory in GB to build HISAT2 index with splice sites
//   readPaths = null
//   star_memory = ""


//   // Boilerplate options
//   clusterOptions = false
  
//   name = false
//   email = false
//   email_on_fail = false
//   max_multiqc_email_size = 25.MB
//   plaintext_email = false
//   monochrome_logs = false
//   help = false
  
//   tracedir = "${params.outdir}/pipeline_info"
//   awsqueue = false
//   awsregion = 'eu-west-1'
//   genomesIgnore = false
//   custom_config_version = 'master'
//   custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
//   hostnames = false
//   config_profile_description = false
//   config_profile_contact = false
//   config_profile_url = false
// }


// // Mail configuration
// mail {
//   smtp.host = '10.254.226.194'
//   smtp.port = 25
//   smtp.user = 'pipelines.histogenex@gmail.com'
//   smtp.password = 'dnarna01!@'
//   smtp.auth = true
//   smtp.starttls.enable = true
//   smtp.starttls.required = true
// }


// // Container slug. Stable releases should specify release tag!
// // Developmental code should specify :dev
// process.container = 'hgx-rnaseq:2.0'

// // Load base.config by default for all pipelines
// // includeConfig 'conf/base.config'


// // Load nf-core custom profiles from different Institutions
// try {
//   includeConfig "${params.custom_config_base}/nfcore_custom.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
// }

// profiles {
//   hgx { includeConfig 'conf/hgx.config' }
//   docker { docker.enabled = true }
//   dockerstef {docker.enabled = true }
// }


// // Load base.config by default for all pipelines
// includeConfig 'conf/hgx.config'


// // Avoid this error:
// // WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
// // docker.runOptions = '-u \$(id -u):\$(id -g)'


// // Load genomes.config if required
// if (!params.genomesIgnore) {
//   includeConfig 'conf/genomes.config'
// }


// // Capture exit codes from upstream processes when piping
// process.shell = ['/bin/bash', '-euo', 'pipefail']

// timeline {
//   enabled = true
//   file = "${params.tracedir}/execution_timeline.html"
// }
// report {
//   enabled = true
//   file = "${params.tracedir}/execution_report.html"
// }
// dag {
//   enabled = true
//   file = "${params.tracedir}/pipeline_dag.png"
// }


// manifest {
//   name = 'hgx/rnaseq'
//   author = 'Van Dam Pieter-Jan, Dangreau Hanne, Van Hoof Elise'
//   homePage = ''
//   description = 'HGX RNA-Seq analysis pipeline, based on nf-core/rnaseq'
//   mainScript = 'hgx_rnaseq.nf'
//   nextflowVersion = '>=19.04.0'
//   version = '2.0'
// }


// // Function to ensure that resource requirements don't go beyond
// // a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
